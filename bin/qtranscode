#!/usr/bin/python3
import argparse
import os
import sys
import time

from transcode.config.ebml import ConfigElement
from transcode.filters.video.keyframes import KeyFrames
from transcode.filters.filterchain import FilterChain
from PyQt5.QtWidgets import QApplication
import transcode.pyqtgui.qencodewidget

parser = argparse.ArgumentParser(description="Encoder.")
parser.add_argument("file", action='store', help="Config file")
parser.add_argument("-n", action='store',
                    help="Select output file to transcode.", default=0, type=int)
parser.add_argument("--pass", "-p", dest="p", action='append',
                    help="Encode pass", default=[], type=int)
parser.add_argument("--quit-on-complete", "-q", dest="q",
                    action='store_true', help="Exit on complete.")
parser.add_argument("--keyframe-analysis", "-k", dest="k",
                    action='store_true', help="Analyze keyframes.")
args = parser.parse_args()
config = ConfigElement.load(args.file)
outfile = config.output_files[args.n]

app = QApplication(sys.argv)


class VideoFrameAnalysis(object):
    def __init__(self, track, logfile=None):
        self.track = track
        self.logfile = logfile
        self.inputIframes = set()
        self.outputIframes = set()

    def notifyencode(self, frame):
        if frame.pict_type == "I":
            k = self.track.frameIndexFromPts(frame.pts)
            self.inputIframes.add(k)

    def notifymux(self, packet):
        if packet.keyframe:
            k = self.track.frameIndexFromPts(packet.pts)
            self.outputIframes.add(k)

    def alterconfig(self):
        diff = self.inputIframes.difference(self.outputIframes)
        modified = False

        if len(diff):
            print(
                f"Warning: [Track {self.track.track_index}] The following are in 'inputIframes' but not 'outputIframes': {sorted(diff)}", file=self.logfile)

            if self.track.filters is None:
                kf = KeyFrames()
                self.track.filters = FilterChain([kf], prev=self.track.source)

            elif len(self.track.filters) and isinstance(self.track.filters[-1], KeyFrames):
                kf = self.track.filters[-1]

            else:
                kf = KeyFrames()
                self.track.filters.append(kf)

            Newkeyframes = set()

            for k in diff:
                try:
                    prev = max({j for j in self.inputIframes if j < k})

                except:
                    prev = 0

                newkeyframes = set()

                try:
                    minkeyint = self.track.encoder.min_keyint

                except AttributeError:
                    minkeyint = 6

                for j in range(k - minkeyint, prev + minkeyint - 1, -minkeyint):
                    newkeyframes.add(j)

                    for i in range(j, j - minkeyint, -1):
                        if i in self.outputIframes:
                            break

                    else:
                        break

                else:
                    break

                for j in newkeyframes:
                    n = self.track.filters.reverseIndexMap[j]
                    kf.add(int(n))
                    modified = True

                Newkeyframes.update(newkeyframes)

            if len(Newkeyframes):
                print(
                    f"Adding Forced Key Frames to configuration: {sorted(Newkeyframes)}", file=logfile)

            return modified

        return modified


with open(f"{config.configstem}-{args.n}.log", "a") as logfile:
    if args.k:
        encoder_overrides = []
        notifyvencode = None
        vanalyses = []

        for k, track in enumerate(outfile.tracks):
            if track.encoder is None or track.codec not in ("libx265", "libx264"):
                encoder_overrides.append(None)
                continue

            statsfile = f"{config.configstem}-{outfile.file_index}.{track.track_index:d}-{track.encoder.codec}-multipass.log"
            override = {"pass_": 1,
                        "slow-firstpass": False, "stats": statsfile}
            encoder_overrides.append(override)

            if track.codec == "libx265":
                override["crf"] = 28

            else:
                override["bitrate"] = 1000

            analysis = VideoFrameAnalysis(track, logfile)
            vanalyses.append(analysis)

            if track is outfile.vtrack:
                notifyvencode = analysis.notifyencode

            else:
                override["notifyencode"] = analysis.notifyencode

        inputIframes = set()
        outputIframes = set()

        def notifymux(packet):
            for analysis in vanalyses:
                if packet.track_index == analysis.track.track_index:
                    analysis.notifymux(packet)

        dlg = transcode.pyqtgui.qencodewidget.QEncodeDialog(
            outfile, encoderoverrides=encoder_overrides, logfile=logfile)
        dlg.packetreceived.connect(notifymux)

        if notifyvencode is not None:
            dlg.framesenttoencoder.connect(notifyvencode)

        dlg.autoClose.setChecked(True)

        if not dlg.exec_():
            sys.exit(1)

        if any([analysis.alterconfig() for analysis in vanalyses]):
            T = time.localtime()
            os.rename(
                args.file, f"{args.file}-backup-{T.tm_year:04d}.{T.tm_mon:02d}.{T.tm_mday:02d}-{T.tm_hour:02d}.{T.tm_min:02d}.{T.tm_sec:02d}")
            ConfigElement.save(config, args.file)

    elif len(args.p) == 0:
        args.p.append(0)

    for k, pass_ in enumerate(args.p):
        dlg = transcode.pyqtgui.qencodewidget.QEncodeDialog(
            outfile, pass_=pass_, logfile=logfile)
        dlg.autoClose.setChecked(k < len(args.p) - 1 or args.q)

        if not dlg.exec_():
            sys.exit(1)
